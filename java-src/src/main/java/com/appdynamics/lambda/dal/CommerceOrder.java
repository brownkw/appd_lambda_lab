package com.appdynamics.lambda.dal;

import java.io.IOException;
import java.util.List;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.javafaker.Faker;

@JsonIgnoreProperties(value = { "db_adapter", "client", "mapper" })
@DynamoDBTable(tableName = "PLACEHOLDER_ORDERS_TABLE_NAME")
public class CommerceOrder {
    private static final String ORDERS_TABLE_NAME = System.getenv("ORDERS_TABLE_NAME");
    private DynamoDbAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private String orderId;
    private String company;
    private String contact;
    private String address;
    private String phoneNumber;
    private int numOrderItems;
    private double price;

    public CommerceOrder() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(ORDERS_TABLE_NAME)).build();
        this.db_adapter = DynamoDbAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getOrderId() {
        return orderId;
    }

    public void setOrderId(final String orderId) {
        this.orderId = orderId;
    }

    @DynamoDBAttribute(attributeName = "company")
    public String getCompany() {
        return company;
    }

    public void setCompany(final String company) {
        this.company = company;
    }

    @DynamoDBAttribute(attributeName = "contact")
    public String getContact() {
        return contact;
    }

    public void setContact(final String contact) {
        this.contact = contact;
    }

    @DynamoDBAttribute(attributeName = "address")
    public String getAddress() {
        return address;
    }

    public void setAddress(final String address) {
        this.address = address;
    }

    @DynamoDBAttribute(attributeName = "phone")
    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(final String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    @DynamoDBAttribute(attributeName = "itemcount")
    public int getNumOrderItems() {
        return numOrderItems;
    }

    public void setNumOrderItems(final int numOrderItems) {
        this.numOrderItems = numOrderItems;
    }

    @DynamoDBAttribute(attributeName = "price")
    public double getPrice() {
        return price;
    }

    public void setPrice(final double price) {
        this.price = price;
    }

    public static class Builder {

        private String company;
        private String contact;
        private String address;
        private String phoneNumber;
        private int numOrderItems;
        private double price;

        public Builder random() {
            final Faker faker = Faker.instance();
            if (this.company == null) {
                this.company = faker.company().name();
            }
            if (this.contact == null) {
                this.contact = faker.name().fullName();
            }
            if (this.address == null) {
                this.address = faker.address().fullAddress();
            }
            if (this.phoneNumber == null) {
                this.phoneNumber = faker.phoneNumber().cellPhone();
            }
            if (this.numOrderItems == 0) {
                this.numOrderItems = faker.number().randomDigitNotZero();
            }
            if (this.price == 0.0) {
                this.price = faker.number().randomDouble(2, 50, 500);
            }

            return this;

        }

        public CommerceOrder build() {
            final CommerceOrder order = new CommerceOrder();
            order.company = this.company;
            order.contact = this.contact;
            order.address = this.address;
            order.phoneNumber = this.phoneNumber;
            order.numOrderItems = this.numOrderItems;
            order.price = this.price;

            return order;
        }
    }

    public List<CommerceOrder> recentOrders() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        scanExp.setLimit(10);        
        List<CommerceOrder> results = this.mapper.scan(CommerceOrder.class, scanExp);
        return results;
    }

    public void save() throws IOException {
        this.mapper.save(this);
    }

    @Override
    public String toString() {        
        String retval = "";
        try {
            retval = new ObjectMapper().writeValueAsString(this);
        } catch (JsonProcessingException e) {
            retval = "";
        }

        return retval;
    }

}